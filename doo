#!/usr/bin/env php
<?php

    if (isset($argv[1])) {

        if(!isset($argv[1])) {

            makeMessage(APP_NOT_GIVEN);

        }

        if(!preg_match("#^[A-Za-z_-]+[0-9_-]*$#", $argv[1])) {

            die("Prject name not accepted ...\n");

        }

        $path = initProjet($argv[1]);

        // Si vous avez desider de creer votre dsn de connection
        if(isset($argv[2]) && $argv[2] == "--dsn") {

            if(isset($argv[3])) {

                if(!verifyDsn($argv[3])) {

                    die("Dsn isn't valide.\n");

                }

                createDsn($argv[3], $argv[1]);
            
            } else {

                die("You not give --dsn value.\n\tUsgae doo init projet-name --dsn Your-Dsn\n\te.g mysql://root:password@localhost:3306/mydatabase\n");
            
            }

        }

    } else {

        die("Destination is empty\n\taborting ...!\n");

    }

function initProjet($projetName) {

$data['autoload'] = <<< EOPAGE
PD9waHANCg0KbmFtZXNwYWNlIERvbzsNCg0KLyoqDQoqIEF1dG9sb2FkZXINCiovDQpjbGFzcyBBdXRvbG9hZA0Kew0KDQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiByZWdpc3RlcigpDQoJew0KDQoJCXNwbF9hdXRvbG9hZF9yZWdpc3RlcihbX19DTEFTU19fLCAibG9hZCJdKTsNCg0KCX0NCg0KCXByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIGxvYWQoJGNsYXNzKQ0KCXsNCg0KCQkkY2xhc3MgPSBzdHJfcmVwbGFjZShfX05BTUVTUEFDRV9fIC4gIlxcIiwgIiIsICRjbGFzcyk7DQoNCgkJJGNsYXNzID0gX19ESVJfXyAuICcvJyAuICRjbGFzczsNCg0KCQkkY2xhc3MgPSBzdHJfcmVwbGFjZSgiXFwiLCAiLyIsICRjbGFzcyk7DQoNCgkJcmVxdWlyZSAkY2xhc3MgLiAnLnBocCc7DQoNCgl9DQoNCn0NCg==
EOPAGE;

$data['doo'] = <<< EOPAGE

EOPAGE;

$data['doodb'] = <<< EOPGAE
PD9waHANCg0KLyoqDQoqIFBIUCwgdW5lIGNsYXNzZSBQSFAgc2ltcGxlLiBEYW5zIGxlIGJ1dCBzaW1wbGlmacOpIGwndXRpbGlzYXRpb24gZGUgUERPDQoqIEBhdXRob3IgRGFraWEgRnJhbmNrIDxkYWtpYWZyYW5ja2luZm9AZ21haWwuY29tPg0KKiBAcGFja2FnZSBEb287DQoqIEB2ZXJzaW9uIDAuMS4wDQoqLw0KbmFtZXNwYWNlIERvbzsNCg0KYWJzdHJhY3QgY2xhc3MgRG9vZGIgew0KDQogICAgLyoqDQogICAgICogQHBhcmFtIG51bGwgJGRzbg0KICAgICAqIEBwYXJhbSBudWxsICRjYg0KICAgICAqIEByZXR1cm4gbnVsbHxcUERPDQogICAgICogQHRocm93cyBcRXhjZXB0aW9uDQogICAgICovDQogICAgcHJvdGVjdCBzdGF0aWMgZnVuY3Rpb24gY29ubmVjdGlvbigkZHNuID0gbnVsbCwgJGNiID0gbnVsbCl7DQoNCiAgICAgICAgaWYoJGRzbiAhPT0gbnVsbCkNCiAgICAgICAgew0KDQogICAgICAgICAgICBpZighaXNfc3RyaW5nKCRkc24pKQ0KICAgICAgICAgICAgew0KDQogICAgICAgICAgICAgICAgJGNiID0gJGRzbjsNCg0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYoJGRzbiA9PT0gbnVsbCkNCiAgICAgICAgew0KICAgICAgICAgICAgJHN0cmVhbSA9IEBmaWxlX2dldF9jb250ZW50cygiLi4vLmNvbmZpZy8uZHNuIik7DQoNCiAgICAgICAgICAgIGlmKCEkc3RyZWFtKQ0KICAgICAgICAgICAgew0KDQogICAgICAgICAgICAgICAgaWYgKCRjYiAhPT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQoNCiAgICAgICAgICAgICAgICAgICAgY2FsbF91c2VyX2Z1bmMoJGNiLCBuZXcgXEV4Y2VwdGlvbigiVsOpcmlmaWV6IGxlIGNoZW1pbiBkZSBmaWNoaWVyIGFwcC5jb25mIHNpdHVlciBkYW5zIGFwcGNvbmZpZyIpKTsNCg0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgew0KDQogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBcRXhjZXB0aW9uKCJWw6lyaWZpZXogbGUgY2hlbWluIGRlIGZpY2hpZXIgYXBwLmNvbmYgc2l0dWVyIGRhbnMgYXBwY29uZmlnIik7DQoNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgJGRzbiA9IHByZWdfcmVwbGFjZSgiI15bQS1aXSs9fFxuIyIsICIiLCBiYXNlNjRfZGVjb2RlKCRzdHJlYW1bMF0pKTsNCg0KICAgICAgICB9DQoNCiAgICAgICAgJHRtcCA9IGV4cGxvZGUoIi8iLCAkZHNuKTsNCg0KICAgICAgICAkY29uZmlnID0gQGV4cGxvZGUoIkAiLCAkdG1wWzJdKTsNCiAgICAgICAgJHVzZXJDb25maWcgPSBAZXhwbG9kZSgiOiIsICRjb25maWdbMF0pOw0KICAgICAgICAkaG9zdENvbmZpZyA9IEBleHBsb2RlKCI6IiwgJGNvbmZpZ1sxXSk7DQoNCiAgICAgICAgJGhvc3QgPSBAJGhvc3RDb25maWdbMF07DQogICAgICAgICRwb3J0ID0gaXNzZXQoJGhvc3RDb25maWdbMV0pID8gQCRob3N0Q29uZmlnWzFdIDogJyc7DQoNCiAgICAgICAgJHVzZXIgPSBAJHVzZXJDb25maWdbMF07DQogICAgICAgICRwYXNzd29yZCA9IGlzc2V0KCR1c2VyQ29uZmlnWzFdKSA/IEAkdXNlckNvbmZpZ1sxXSA6ICcnOw0KDQogICAgICAgICRkYm5hbWUgPSBAJHRtcFszXTsNCiAgICAgICAgJGVuZ2luZSA9IEAkdG1wWzBdOw0KDQogICAgICAgIHRyeXsNCg0KICAgICAgICAgICAgIyBJbnN0YW50aWF0aW9uIGRlIGxhIGNvbm5lY3Rpb24gdmlhIGxlIGRyaXZlciBQRE8NCiAgICAgICAgICAgICRiZGQgPSBuZXcgXFBETygiJHtlbmdpbmV9Omhvc3Q9JHtob3N0fTtkYm5hbWU9JHtkYm5hbWV9IiwgIiR7dXNlcn0iLCAiJHtwYXNzd29yZH0iKTsNCg0KICAgICAgICB9Y2F0Y2goXEV4Y2VwdGlvbiAkZSl7DQogICAgICAgICAgICAjIGdlc3Rpb24gZCdleGNlcHRpb24gc3VyIGxhIGNoYWluZSBkZSBjb25uZWN0aW9uIFBETw0KDQogICAgICAgICAgICBpZigkY2IgIT09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgIyBpcyBlbGxlIG4nZXN0IHBhcyBudWxsLCBleGVjdXRpb24gZGUgbGEgZm9uY3Rpb24gZGUgcmFwcGVsDQogICAgICAgICAgICAgICAgY2FsbF91c2VyX2Z1bmMoJGNiLCAkZSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiBudWxsOw0KDQogICAgICAgIH0NCg0KICAgICAgICBpZigkY2IgIT09IG51bGwpDQogICAgICAgIHsNCiAgICAgICAgICAgICMgaXMgZWxsZSBuJ2VzdCBwYXMgbnVsbCwgZXhlY3V0aW9uIGRlIGxhIGZvbmN0aW9uIGRlIHJhcHBlbA0KICAgICAgICAgICAgY2FsbF91c2VyX2Z1bmMoJGNiLCBudWxsKTsNCiAgICAgICAgfQ0KDQogICAgICAgICMgUmV0b3VyIGRlIGwnb2JqZXQgUERPDQogICAgICAgIHJldHVybiAkYmRkOw0KDQogICAgfQ0KDQp9DQo=
EOPGAE;

$data['doodata'] = <<< EOPAGE
PD9waHANCg0KLyoqDQoqIFBIUCwgdW5lIGNsYXNzZSBQSFAgc2ltcGxlLiBEYW5zIGxlIGJ1dCBzaW1wbGlmacOpIGwndXRpbGlzYXRpb24gZGUgUERPDQoqIEBhdXRob3IgRGFraWEgRnJhbmNrIDxkYWtpYWZyYW5ja2luZm9AZ21haWwuY29tPg0KKiBAcGFja2FnZSBEb287DQoqIEB2ZXJzaW9uIDAuMS4wDQoqLw0KDQpuYW1lc3BhY2UgRG9vOw0KDQovKioNCiogRG9vZGF0YSwgY2xhc3MgRG9vIHBlcm1ldHRhbnQgZGUgY3J5cHRlciBldCBkZWNyaXB0ZXIgZGUgZG9ubmVlDQoqLw0KYWJzdHJhY3QgY2xhc3MgRG9vZGF0YSBleHRlbmRzIERvb2RiIHsNCg0KCXByaXZhdGUgc3RhdGljICRwYXJ0ID0gIlwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIjsNCglwdWJsaWMgc3RhdGljICRtb2RlID0gTUNSWVBUX01PREVfQ0JDOw0KCXB1YmxpYyBzdGF0aWMgJGtleSA9ICdlMTA0ODFkZGQwMmFjZjM2NmY1N2M2MDgxOTg3N2EzMic7DQoJcHJpdmF0ZSBzdGF0aWMgJGRhdGFMZW4gID0gbnVsbDsNCg0KCS8qKg0KCSogZGVjcnlwdG8sIGZvbmN0aW9uIHBlcm1ldHRhbnQgZGUgZGVjcnlwdGVyIHVuZSBjaGFpbmUgZGUgY2FyYWN0ZXJlIGVuY3J5cHRlciBhdmVjIGxhIGZvbmN0aW9uIHNvZXVyLg0KICAgICoNCgkqIEBwYXJhbSBzdHJpbmcsIGRvbm5lZSBhIGRlY3J5cHRlci4NCgkqIEBwYXJhbSBmdW5jdGlvbiwgdW5lIGZvbmN0aW9uIGRlIGNhbGxiYWNrLg0KCSogQHJldHVybiBzdHJpbmcsIHJlc3VsdGF0DQoJKi8NCg0KCXByb3RlY3Qgc3RhdGljIGZ1bmN0aW9uIGRlY3J5cHRvKCRkYXRhLCAkY2IgPSBudWxsKQ0KCXsNCg0KCQkkZGVjb2RlID0gYmFzZTY0X2RlY29kZSgkZGF0YSk7DQoJCSRyID0gbWNyeXB0X2RlY3J5cHQoTUNSWVBUX1JJSk5EQUVMXzEyOCwgc2VsZjo6JGtleSwgJGRlY29kZSwgc2VsZjo6JG1vZGUsIHNlbGY6OiRwYXJ0KTsNCg0KCQlpZigkY2IgIT09IG51bGwpDQoJCXsNCgkJCWNhbGxfdXNlcl9mdW5jKCRjYiwgKHN1YnN0cigkciwgMCwgc2VsZjo6JGRhdGFMZW4pKSk7DQoJCX0NCg0KCQlyZXR1cm4gJHI7DQoNCgl9DQoNCg0KCS8qKg0KCSogY3J5cHRvLCBmb25jdGlvbiBwZXJtZXR0YW50IGQnZW5jcnlwdGVyIHVuZSBjaGFpbmUgZGUgY2FyYWN0ZXJlLg0KICAgICoNCgkqIEBwYXJhbSBzdHJpbmcsIGRvbm5lZSBhIGVuY3J5cHRlci4NCgkqIEBwYXJhbSBmdW5jdGlvbiwgdW5lIGZvbmN0aW9uIGRlIGNhbGxiYWNrLg0KCSogQHJldHVybiBzdHJpbmcsIHJlc3VsdGF0DQoJKi8NCglwcm90ZWN0IHN0YXRpYyBmdW5jdGlvbiBjcnlwdG8oJGRhdGEsICRjYiA9IG51bGwpDQoJew0KDQoJCSMgT24gcmVjdXBlcmUgbGEgdGFpbGxlIGRlIGxhIGRvbm5lZS4NCgkJc2VsZjo6JGRhdGFMZW4gPSBzdHJsZW4oJGRhdGEpOw0KCQkkciA9IGJhc2U2NF9lbmNvZGUobWNyeXB0X2VuY3J5cHQoTUNSWVBUX1JJSk5EQUVMXzEyOCwgc2VsZjo6JGtleSwgJGRhdGEsIHNlbGY6OiRtb2RlLCBzZWxmOjokcGFydCkpOw0KDQoJCWlmKCRjYiAhPT0gbnVsbCkNCgkJew0KCQkJY2FsbF91c2VyX2Z1bmMoJGNiLCAkcik7DQoJCX0NCg0KCQlyZXR1cm4gJHI7DQoNCgl9DQoNCn0NCg==
EOPAGE;

$data['doomail'] = <<< EOPAGE

EOPAGE;

$data['doodatemaker'] = <<< EOPAGE

EOPAGE;

$data["artisan"] = <<< EOPAGE
IyEvdXNyL2Jpbi9ldm4gcGhwDQo8P3BocA0KDQoJZGVmaW5lKCJQUk9KRUNUX0NSRUFURUQiLCAzKTsNCiAgICBkZWZpbmUoIkFQUF9OQU1FX05PVF9WQUxJREUiLCA0KTsNCiAgICBkZWZpbmUoIkFQUF9FWElTVFMiLCA1KTsNCiAgICBkZWZpbmUoIkFQUF9OT1RfR0lWRU4iLCA3KTsNCg0KICAgIGRlZmluZSgiRFNOX05PVF9WQUxJREUiLCAxKTsNCiAgICBkZWZpbmUoIkRTTl9DUkVBVEVEIiwgMik7DQogICAgZGVmaW5lKCJEU05fQ09ORl9FWElTVFMiLCA2KTsNCg0KIAlzd2l0Y2goJGFyZ3ZbMV0pIHsNCg0KICAgICAgICBjYXNlICJkc24iOg0KDQogICAgICAgICAgICBpZighZW1wdHkoJGFyZ3ZbMl0pICYmICRhcmd2WzJdID09ICItLXJlbW92ZSIpIHsNCg0KICAgICAgICAgICAgICAgIGlmKCFpc19kaXIoIkRvbyIpKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgZGllKCJZb3UgYXJlbid0IGluIHlvdXIgcHJvamVjdCBmb2xkZXIuXG4gRG8gY2QgTXlBcHBGb2xkZXIgYW5kIGV4ZWN1dGUgY29tbWFuZCBcblx0cGhwIGFydGlzYW4gZHNuIFlvdXItZHNuIik7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgJHN0YXR1cyA9IEBzaGVsbF9leGVjKCJybSAtciAuLy5jb25maWcgMj4gLi8ubG9nIik7DQoNCiAgICAgICAgICAgICAgICBpZihpc19udWxsKCRzdGF0dXMpKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgZGllKCJEc24tY29uZmlnIG5vdC1mb3VuZC5cbiIpOw0KDQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgZGllKCJZb3VyLWRzbiBpcyByZW1vdmVkLlxuIik7DQoNCiAgICAgICAgICAgIH0gZWxzZSBpZihpc3NldCgkYXJndlsyXSkgJiYgJGFyZ3ZbMl0gIT0gIi0tcmVtb3ZlIiAgJiYgIWlzc2V0KCRhcmd2WzNdKSkgew0KDQogICAgICAgICAgICAgICAgY3JlYXRlRHNuKCRhcmd2WzJdLCAnbmV3JywgIi4iKTsNCiAgICAgICAgICAgICAgICBkaWUoIkRzbi1jb25maWcgY3JlYXRlZC5cbiIpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICB9IGVsc2UgaWYgKGlzc2V0KCRhcmd2WzJdKSAmJiBpc3NldCgkYXJndlszXSkgJiYgJGFyZ3ZbM10gPT0gIi0tdXBkYXRlIikgew0KDQogICAgICAgICAgICAgICAgY3JlYXRlRHNuKCRhcmd2WzJdLCAndXBkYXRlJywgIi4iKTsNCiAgICAgICAgICAgICAgICBkaWUoIlVwLXRvLWRhdGUgZHNuIHN1Y2Nlc3MuXG4iKTsNCg0KICAgICAgICAgICAgfSBlbHNlIHsNCg0KICAgICAgICAgICAgICAgIGRpZSgiRmF0YWwgZXJyb3IgZHVlIHRvIG5vdCB2YWx1ZSBnaXZlbiBhdCBkc24gY29tbWFuZFxuVXNhZ2UgOiBhcnRpc2FuIGRzbiBteXNxbDovL3VzZXJuYW1lQGxvY2FsaG9zdC9kYXRhYmFzZVxuXG5cdC0tdXBkYXRlIFRvIHVwZGF0ZSBZb3VyIGRzblxuIik7DQogICAgICAgICAgICANCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgYnJlYWs7DQogICAgfQ0KDQoJZnVuY3Rpb24gdmVyaWZ5RHNuKCRkbnMpIHsNCg0KCSAgICByZXR1cm4gcHJlZ19tYXRjaCgiIyhwZ3NxbHxteXNxbHxzcWxpdGUpOi8vW1xTXSs6PyhbXFNdKyk/QFtcU106PyhbXFNdKykvW1x3XGRdKyMiLCAkZG5zKTsNCg0KCX0NCg0KCWZ1bmN0aW9uIGNyZWF0ZURzbigkZHNuLCAkYWN0aW9uLCAkcGF0aCkgew0KDQoJICAgIGlmKCRhY3Rpb24gPT09ICJ1cGRhdGUiKSB7DQoNCgkgICAgICAgIGlmKGZpbGVfZXhpc3RzKCIke3BhdGh9Ly5jb25mLy5kc24iKSkgew0KDQoJICAgICAgICAgICAgZmlsZV9wdXRfY29udGVudHMoIiR7cGF0aH0vLmNvbmZpZy8uZHNuIiwgIkROUz0iIC4gYmFzZTY0X2VuY29kZSgkZHNuKSk7DQoNCgkgICAgICAgIH0gZWxzZSB7DQoNCgkgICAgICAgICAgICBjcmVhdGVEc24oJGRzbiwgIm5ldyIsICRwYXRoKTsNCgkgICAgICAgIA0KCSAgICAgICAgfQ0KCSAgICANCgkgICAgfSBlbHNlIGlmICgkYWN0aW9uID09PSAibmV3Iikgew0KDQoJICAgICAgICBpZighdmVyaWZ5RHNuKCRkc24pKSB7DQoJICAgICAgICAgICAgIA0KCSAgICAgICAgfQ0KDQoJICAgICAgICBpZihpc19kaXIoIi4vLmNvbmZpZyIpKSB7DQoNCgkgICAgICAgICAgICBtYWtlTWVzc2FnZShEU05fQ09ORl9FWElTVFMpOw0KDQoJICAgICAgICB9DQoNCgkgICAgICAgIG1rZGlyKCJ7JHBhdGh9Ly5jb25maWciLCAwNzc3KTsNCgkgICAgICAgIHRvdWNoKCJ7JHBhdGh9Ly5jb25maWcvLmRzbiIpOw0KCSAgICAgICAgZmlsZV9wdXRfY29udGVudHMoInskcGF0aH0vLmNvbmZpZy8uZHNuIiwgYmFzZTY0X2VuY29kZSgkZHNuKSk7DQoJICAgIH0NCgl9DQoNCglmdW5jdGlvbiBtYWtlTWVzc2FnZSgkZXJybm8gPSBudWxsKSB7DQoNCiAgICBpZigkZXJybm8gPT09IERTTl9OT1RfVkFMSURFKSB7DQoNCiAgICAgICAgZGllKCJZb3VyLURzbiBpcyBub3QgdmFsaWRlLlxuXHRVc2FnZSBkc24gZS5nIG15c3FsOi8vdXNlcm5hbWVbOnBhc3N3b3JkXUBob3N0bmFtZVs6cG9ydF0vZGF0YWJhc2UiKTsNCg0KICAgIH0gZWxzZSBpZigkZXJybm8gPT09IEFQUF9OQU1FX05PVF9WQUxJREUpIHsNCg0KICAgICAgICBkaWUoIlByb2plY3QgbmFtZSBpcyBub3QgdmFsYWJsZSIpOw0KDQogICAgfSBlbHNlIGlmKCRlcnJubyA9PT0gRFNOX0NPTkZfRVhJU1RTKSB7DQoNCiAgICAgICAgZGllKCJBIG90aGVyIERzbi1jb25maWcgZXhpc3QsIHNvIHVwZGF0ZSBpdCBvciByZW1vdmUgaXQuXG5Vc2FnZSBkb28gZHNuIHlvdXJkc24gLS11cGRhdGUsIHRvIHVwZGF0ZVxuIik7DQoNCiAgICB9IGVsc2UgaWYoJGVycm5vID09PSBBUFBfRVhJU1RTKSB7DQoNCiAgICAgICAgZGllKCJQcm9qZWN0IGV4c2l0cyBpbiB0aGlzIGZvbGRlci5cblx0VXNhZ2UgZG9vIHJlbmFtZSAvbG9zdC9wYXRoIC9uZXcvcGF0aCBhcHBcbiIpOw0KDQogICAgfQ0KfQ0K
EOPAGE;

    if($projetName) {
        
        $path = $projetName;

    } else {

        $path = "App";

    }

    if(!is_dir($path)) {
        
        mkdir("${path}/Doo", 0777, true);

    } else {

        echo "This project exists ...\n";
        die();

    }

    $paths["dir"] = [

        "controller" => "/controller",
        "model" => "/model",
        "views" => "/views",
        "public" => "/public",
        "js" => "/public/js",
        "css" => "/public/css",
        "images" => "/public/images"

    ];

    $paths["file"]["root"] = [

        "autoload" => "Doo/Autoload.php",
        "doo" => "Doo/Doo.php",
        "doodata" => "Doo/Doodata.php",
        "doodatemaker" => "Doo/DoodateMaker.php",
        "doodb" => "Doo/Doodb.php",
        "doomail" => "Doo/Doomail.php",
        "artisan" => "artisan"

    ];

    $paths["file"]["other"] = [

        "js" => "public/js/app.js",
        "css" => "public/css/style.css",
        "index" => "index.php"

    ];

    foreach($paths["dir"] as $key => $value) {

        mkdir("${path}/{$value}", 0777);
    
    }

    foreach($paths["file"]["other"] as $key => $value) {
    
        touch("{$path}/{$value}");
    
    }

    foreach($paths["file"]["root"] as $key => $value) {

        touch("${path}/{$value}");
        file_put_contents("${path}/{$value}", base64_decode($data[$key]));
    
    }

    $h = strtoupper($path);
    
    views($h);
    
    return $path;

}

function createDsn($dsn, $path) {
    
        mkdir("{$path}/.config", 0777);
        touch("{$path}/.config/.dsn");
        file_put_contents("{$path}/.config/.dsn", "{*" . base64_encode($dsn) . "-}");
        die("Dsn-created.\n");

}

function verifyDsn($dns) {

    return preg_match("#(pgsql|mysql|sqlite)://[\S]+:?([\S]+)?@[\S]:?([\S]+)/[\w\d]+#", $dns);

}

function views($h) {

    echo "\n* Project name: <${h}>\n\n|_Doo/\n.  |_Autoload.php\n.  |_Doo.php\n.  |_Doodata.php\n.  |_DooDataMaker.php\n.  |_Doodb.php\n.  |_DooMaili.php\n";
    echo "|_model\n|_views\n|_controller\n|_index.php\n|_artisan\n";
    echo "\n* Doo project created\n";

}