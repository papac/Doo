#!/usr/bin/env php
<?php


if($argv[1] == "init") {

$autoload = <<< EOPAGE
PD9waHANCg0KbmFtZXNwYWNlIERvbzsNCg0KLyoqDQoqIEF1dG9sb2FkZXINCiovDQpjbGFzcyBBdXRvbG9hZA0Kew0KDQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiByZWdpc3RlcigpDQoJew0KDQoJCXNwbF9hdXRvbG9hZF9yZWdpc3RlcihbX19DTEFTU19fLCAibG9hZCJdKTsNCg0KCX0NCg0KCXByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIGxvYWQoJGNsYXNzKQ0KCXsNCg0KCQkkY2xhc3MgPSBzdHJfcmVwbGFjZShfX05BTUVTUEFDRV9fIC4gIlxcIiwgIiIsICRjbGFzcyk7DQoNCgkJJGNsYXNzID0gX19ESVJfXyAuICcvJyAuICRjbGFzczsNCg0KCQkkY2xhc3MgPSBzdHJfcmVwbGFjZSgiXFwiLCAiLyIsICRjbGFzcyk7DQoNCgkJcmVxdWlyZSAkY2xhc3MgLiAnLnBocCc7DQoNCgl9DQoNCn0NCg==
EOPAGE;

$doo = <<< EOPAGE

EOPAGE;

$doodb = <<< EOPGAE
PD9waHANCg0KLyoqDQoqIFBIUCwgdW5lIGNsYXNzZSBQSFAgc2ltcGxlLiBEYW5zIGxlIGJ1dCBzaW1wbGlmacOpIGwndXRpbGlzYXRpb24gZGUgUERPDQoqIEBhdXRob3IgRGFraWEgRnJhbmNrIDxkYWtpYWZyYW5ja2luZm9AZ21haWwuY29tPg0KKiBAcGFja2FnZSBEb287DQoqIEB2ZXJzaW9uIDAuMS4wDQoqLw0KDQpuYW1lc3BhY2UgRG9vOw0KDQpjbGFzcyBEb29kYiB7DQoNCiAgICAvKioNCiAgICAqIGNyZWF0aW9uIGQndW4gY29ubmVjdGlvbiBQRE8NCiAgICAqDQogICAgKiBAcGFyYW0gYXJyYXkNCiAgICAqIEBwYXJhbSBjYWxsYmFjayBmdW5jdGlvbg0KICAgICogQHJldHVybiBQRE8gfHwgTlVMTA0KICAgICogZS5nIG15c3FsOi8vdXNlcm5hbWU6cGFzc3dvcmRAaG9zdG5hbWU6cG9ydC9kYm5hbWUNCiAgICAqLw0KDQogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBjb25uZWN0aW9uKCRzZG4sICRjYiA9IG51bGwpew0KDQogICAgICAgICR0bXAgPSBleHBsb2RlKCIvIiwgJHNkbik7DQoNCiAgICAgICAgJGNvbmZpZyA9IGV4cGxvZGUoIkAiLCAkdG1wWzJdKTsNCiAgICAgICAgJHVzZXJDb25maWcgPSBleHBsb2RlKCI6IiwgJGNvbmZpZ1swXSk7DQogICAgICAgICRob3N0Q29uZmlnID0gZXhwbG9kZSgiOiIsICRjb25maWdbMV0pOw0KDQogICAgICAgICRob3N0ID0gJGhvc3RDb25maWdbMF07DQogICAgICAgICRwb3J0ID0gaXNzZXQoJGhvc3RDb25maWdbMV0pID8gJGhvc3RDb25maWdbMV0gOiAnJzsNCg0KICAgICAgICAkdXNlciA9ICR1c2VyQ29uZmlnWzBdOw0KICAgICAgICAkcGFzc3dvcmQgPSBpc3NldCgkdXNlckNvbmZpZ1sxXSkgPyAkdXNlckNvbmZpZ1sxXSA6ICcnOw0KDQogICAgICAgICRkYm5hbWUgPSAkdG1wWzNdOw0KICAgICAgICAkZW5naW5lID0gJHRtcFswXTsNCg0KDQogICAgICAgICMgY3JlYXRlIGRlIGwnYXBlcmN1IGV4dGVybmUuDQogICAgICAgICRjb25uZWN0aW9uRGF0YSA9IFsNCiAgICAgICAgICAgICJlbmdpbmUiID0+ICRlbmdpbmUsDQogICAgICAgICAgICAiaG9zdCIgPT4gJGhvc3QsDQogICAgICAgICAgICAicG9ydCIgPT4gJHBvcnQsDQogICAgICAgICAgICAidXNlciIgPT4gJHVzZXIsDQogICAgICAgICAgICAicGFzc3dvcmQiID0+ICRwYXNzd29yZCwNCiAgICAgICAgICAgICJkYm5hbWUiID0+ICRkYm5hbWUNCiAgICAgICAgXTsNCg0KICAgICAgICB0cnl7DQoNCiAgICAgICAgICAgICMgSW5zdGFudGlhdGlvbiBkZSBsYSBjb25uZWN0aW9uIHZpYSBsZSBkcml2ZXIgUERPDQogICAgICAgICAgICAkYmRkID0gbmV3IFxQRE8oInskZW5naW5lfTpob3N0PXskaG9zdH07ZGJuYW1lPXskZGJuYW1lfSIsICJ7JHVzZXJ9IiwgInskcGFzc3dvcmR9Iik7DQoNCiAgICAgICAgfWNhdGNoKFxFeGNlcHRpb24gJGUpew0KICAgICAgICAgICAgIyBnZXN0aW9uIGQnZXhjZXB0aW9uIHN1ciBsYSBjaGFpbmUgZGUgY29ubmVjdGlvbiBQRE8NCg0KICAgICAgICAgICAgaWYoJGNiICE9PSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICMgaXMgZWxsZSBuJ2VzdCBwYXMgbnVsbCwgZXhlY3V0aW9uIGRlIGxhIGZvbmN0aW9uIGRlIHJhcHBlbA0KICAgICAgICAgICAgICAgIGNhbGxfdXNlcl9mdW5jX2FycmF5KCRjYiwgWyRlLCAkY29ubmVjdGlvbkRhdGFdKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIG51bGw7DQoNCiAgICAgICAgfQ0KDQogICAgICAgIGlmKCRjYiAhPT0gbnVsbCkNCiAgICAgICAgew0KICAgICAgICAgICAgIyBpcyBlbGxlIG4nZXN0IHBhcyBudWxsLCBleGVjdXRpb24gZGUgbGEgZm9uY3Rpb24gZGUgcmFwcGVsDQogICAgICAgICAgICBjYWxsX3VzZXJfZnVuY19hcnJheSgkY2IsIFtudWxsLCAkY29ubmVjdGlvbkRhdGFdKTsNCiAgICAgICAgfQ0KDQogICAgICAgICMgUmV0b3VyIGRlIGwnb2JqZXQgUERPDQogICAgICAgIHJldHVybiAkYmRkOw0KDQogICAgfQ0KDQp9DQo=
EOPGAE;

$doodata = <<< EOPAGE
PD9waHANCg0KLyoqDQoqIFBIUCwgdW5lIGNsYXNzZSBQSFAgc2ltcGxlLiBEYW5zIGxlIGJ1dCBzaW1wbGlmacOpIGwndXRpbGlzYXRpb24gZGUgUERPDQoqIEBhdXRob3IgRGFraWEgRnJhbmNrIDxkYWtpYWZyYW5ja2luZm9AZ21haWwuY29tPg0KKiBAcGFja2FnZSBEb287DQoqIEB2ZXJzaW9uIDAuMS4wDQoqLw0KDQpuYW1lc3BhY2UgRG9vOw0KDQovKioNCiogRG9vZGF0YSwgY2xhc3MgRG9vIHBlcm1ldHRhbnQgZGUgY3J5cHRlciBldCBkZWNyaXB0ZXIgZGUgZG9ubmVlDQoqLw0KY2xhc3MgRG9vZGF0YQ0Kew0KDQoJcHJpdmF0ZSBzdGF0aWMgJHBhcnQgPSAiXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDAiOw0KCXB1YmxpYyBzdGF0aWMgJG1vZGUgPSBNQ1JZUFRfTU9ERV9DQkM7DQoJcHVibGljIHN0YXRpYyAka2V5ID0gJ2UxMDQ4MWRkZDAyYWNmMzY2ZjU3YzYwODE5ODc3YTMyJzsNCglwcml2YXRlIHN0YXRpYyAkZGF0YUxlbiAgPSBudWxsOw0KDQoJLyoqDQoJKiBkZWNyeXB0bywgZm9uY3Rpb24gcGVybWV0dGFudCBkZSBkZWNyeXB0ZXIgdW5lIGNoYWluZSBkZSBjYXJhY3RlcmUgZW5jcnlwdGVyIGF2ZWMgbGEgZm9uY3Rpb24gc29ldXIuDQogICAgKg0KCSogQHBhcmFtIHN0cmluZywgZG9ubmVlIGEgZGVjcnlwdGVyLg0KCSogQHBhcmFtIGZ1bmN0aW9uLCB1bmUgZm9uY3Rpb24gZGUgY2FsbGJhY2suDQoJKiBAcmV0dXJuIHN0cmluZywgcmVzdWx0YXQNCgkqLw0KDQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBkZWNyeXB0bygkZGF0YSwgJGNiID0gbnVsbCkNCgl7DQoNCgkJJGRlY29kZSA9IGJhc2U2NF9kZWNvZGUoJGRhdGEpOw0KCQkkciA9IG1jcnlwdF9kZWNyeXB0KE1DUllQVF9SSUpOREFFTF8xMjgsIHNlbGY6OiRrZXksICRkZWNvZGUsIHNlbGY6OiRtb2RlLCBzZWxmOjokcGFydCk7DQoNCgkJaWYoJGNiICE9PSBudWxsKQ0KCQl7DQoJCQljYWxsX3VzZXJfZnVuYygkY2IsIChzdWJzdHIoJHIsIDAsIHNlbGY6OiRkYXRhTGVuKSkpOw0KCQl9DQoNCgkJcmV0dXJuICRyOw0KDQoJfQ0KDQoNCgkvKioNCgkqIGNyeXB0bywgZm9uY3Rpb24gcGVybWV0dGFudCBkJ2VuY3J5cHRlciB1bmUgY2hhaW5lIGRlIGNhcmFjdGVyZS4NCiAgICAqDQoJKiBAcGFyYW0gc3RyaW5nLCBkb25uZWUgYSBlbmNyeXB0ZXIuDQoJKiBAcGFyYW0gZnVuY3Rpb24sIHVuZSBmb25jdGlvbiBkZSBjYWxsYmFjay4NCgkqIEByZXR1cm4gc3RyaW5nLCByZXN1bHRhdA0KCSovDQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBjcnlwdG8oJGRhdGEsICRjYiA9IG51bGwpDQoJew0KDQoJCSMgT24gcmVjdXBlcmUgbGEgdGFpbGxlIGRlIGxhIGRvbm5lZS4NCgkJc2VsZjo6JGRhdGFMZW4gPSBzdHJsZW4oJGRhdGEpOw0KCQkkciA9IGJhc2U2NF9lbmNvZGUobWNyeXB0X2VuY3J5cHQoTUNSWVBUX1JJSk5EQUVMXzEyOCwgc2VsZjo6JGtleSwgJGRhdGEsIHNlbGY6OiRtb2RlLCBzZWxmOjokcGFydCkpOw0KDQoJCWlmKCRjYiAhPT0gbnVsbCkNCgkJew0KCQkJY2FsbF91c2VyX2Z1bmMoJGNiLCAkcik7DQoJCX0NCg0KCQlyZXR1cm4gJHI7DQoNCgl9DQoNCn0NCg==
EOPAGE;

$doomaili = <<< EOPAGE

EOPAGE;

$doodatamaker = <<< EOPAGE

EOPAGE;


    if (isset($argv[2])) {
        $path = $argv[2];
    } else {
        $path = "App";
    }
    if (!is_dir($path)) {
      mkdir("{$path}/Doo", 0777, true);
    } else {
       die("this project exists ...\n");
    }

    mkdir("{$path}/controller", 0777);
    mkdir("{$path}/model", 0777);
    mkdir("{$path}/views", 0777);

    mkdir("{$path}/public/js", 0777, true);
    mkdir("{$path}/public/css", 0777, true);
    mkdir("{$path}/public/image", 0777, true);

    touch("{$path}/public/js/app.js");
    touch("{$path}/public/css/style.css");

    touch("{$path}/Doo/Autoload.php");
    touch("{$path}/Doo/Doo.php");
    touch("{$path}/Doo/Doodata.php");
    touch("{$path}/Doo/DooDateMaker.php");
    touch("{$path}/Doo/Doodb.php");
    touch("{$path}/Doo/DooMaili.php");
    touch($path . "/index.php");

    file_put_contents("{$path}/Doo/Autoload.php", base64_decode($autoload));
    file_put_contents("{$path}/Doo/Doo.php", base64_decode($doo));
    file_put_contents("{$path}/Doo/Doodata.php", base64_decode($doodata));
    file_put_contents("{$path}/Doo/DooDateMaker.php", base64_decode($doodatamaker));
    file_put_contents("{$path}/Doo/Doodb.php", base64_decode($doodb));
    file_put_contents("{$path}/Doo/DooMaili.php", base64_decode($doomaili));

    $h = strtoupper($path);

    echo "Doo project created\n";
    echo "Project name: <{$h}>\n|_Doo/\n.  |_Autoload.php\n.  |_Doo.php\n.  |_Doodata.php\n.  |_DooDataMaker.php\n.  |_Doodb.php\n.  |_DooMaili.php\n";
    echo "|_model\n|_views\n|_controller\n|_index.php\n";

}

// Si vous avez desider de creer votre dsn de connection
if(isset($argv[3]) && $argv[3] === "--dsn")
{

    if(isset($argv[4]))
    {

        mkdir("{$path}/appconfig", 0777);

        touch("{$path}/appconfig/app.conf");
        file_put_contents("{$path}/appconfig/app.conf", base64_encode($argv[4]));

    }

}
